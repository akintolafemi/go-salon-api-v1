generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounttypes {
  id    Int     @id @default(autoincrement())
  type  String  @db.VarChar(255)
  users users[]
}

model appointments {
  id                                     Int        @id @default(autoincrement())
  userid                                 Int?
  locationid                             Int?
  specialistid                           Int?
  description                            String?    @db.Text
  scheduleddatetime                      DateTime   @default(now()) @db.DateTime(6)
  serviceid                              Int?
  datecreated                            DateTime   @default(now()) @db.DateTime(6)
  dateupdated                            DateTime?  @db.DateTime(6)
  datecancelled                          DateTime?  @db.DateTime(6)
  cancelled                              Int        @default(0)
  locations                              locations? @relation(fields: [locationid], references: [id], map: "appointments_ibfk_2")
  services                               services?  @relation(fields: [serviceid], references: [id], map: "appointments_ibfk_4")
  users_appointments_specialistidTousers users?     @relation("appointments_specialistidTousers", fields: [specialistid], references: [userid], map: "appointments_ibfk_3")
  users_appointments_useridTousers       users?     @relation("appointments_useridTousers", fields: [userid], references: [userid], onDelete: Cascade, map: "appointments_ibfk_1")

  @@index([locationid], map: "locationid")
  @@index([serviceid], map: "serviceid")
  @@index([specialistid], map: "specialistid")
  @@index([userid], map: "userid")
}

model bankaccounts {
  id             Int        @id @default(autoincrement())
  userid         Int?
  bankid         Int?
  nuban          String     @db.VarChar(255)
  banklinkedname String?    @db.VarChar(255)
  datecreated    DateTime   @default(now()) @db.DateTime(6)
  dateupdated    DateTime?  @db.DateTime(6)
  datedeleted    DateTime?  @db.DateTime(6)
  deleted        Int        @default(0)
  banks          banks?     @relation(fields: [bankid], references: [id], map: "bankaccounts_ibfk_2")
  users          users?     @relation(fields: [userid], references: [userid], onDelete: Cascade, map: "bankaccounts_ibfk_1")
  payments       payments[]

  @@index([bankid], map: "bankid")
  @@index([userid], map: "userid")
}

model banks {
  id           Int            @id @default(autoincrement())
  sortcode     String         @unique(map: "sortcode") @db.VarChar(255)
  name         String         @db.VarChar(255)
  bankaccounts bankaccounts[]
}

model cities {
  id             Int         @id @default(autoincrement())
  stateid        Int?
  name           String      @db.VarChar(255)
  code           String      @db.VarChar(255)
  googlelocation String      @unique(map: "googlelocation") @db.VarChar(255)
  states         states?     @relation(fields: [stateid], references: [id], map: "cities_ibfk_1")
  locations      locations[]

  @@index([stateid], map: "stateid")
}

model locations {
  id                    Int                     @id @default(autoincrement())
  salonid               Int
  address               String                  @db.Text
  cityid                Int?
  stateid               Int?
  googlelocation        String?                 @db.VarChar(255)
  datecreated           DateTime                @default(now()) @db.DateTime(6)
  dateupdated           DateTime?               @db.DateTime(6)
  datedeleted           DateTime?               @db.DateTime(6)
  deleted               Int                     @default(0)
  cities                cities?                 @relation(fields: [cityid], references: [id], map: "locations_ibfk_2")
  salons                salons                  @relation(fields: [salonid], references: [id], onDelete: Cascade, map: "locations_ibfk_1")
  states                states?                 @relation(fields: [stateid], references: [id], map: "locations_ibfk_3")
  appointments          appointments[]
  salonlocationservices salonlocationservices[]
  visits                visits[]

  @@index([cityid], map: "cityid")
  @@index([salonid], map: "salonid")
  @@index([stateid], map: "stateid")
}

model logins {
  id        Int       @id @default(autoincrement())
  username  String    @unique(map: "username") @db.VarChar(255)
  password  String    @db.VarChar(255)
  token     String?   @db.VarChar(255)
  lastlogin DateTime? @db.DateTime(6)
  status    String?   @db.VarChar(50)
  islogin   Int       @default(0)
  users     users?
}

model loginstatuses {
  id         Int    @id @default(autoincrement())
  statustype String @db.VarChar(50)
}

model paymentchannels {
  id          Int        @id @default(autoincrement())
  channel     String     @unique(map: "channel") @db.VarChar(255)
  code        String     @unique(map: "code") @db.VarChar(255)
  status      String?    @db.VarChar(50)
  datecreated DateTime   @default(now()) @db.DateTime(6)
  payments    payments[]
}

model payments {
  id               Int              @id @default(autoincrement())
  ownerid          Int
  bankaccountid    Int?
  paymentchannelid Int?
  amount           Float
  status           String?          @db.VarChar(50)
  datepaid         DateTime         @default(now()) @db.DateTime(6)
  bankaccounts     bankaccounts?    @relation(fields: [bankaccountid], references: [id], map: "payments_ibfk_2")
  users            users            @relation(fields: [ownerid], references: [userid], onDelete: Cascade, map: "payments_ibfk_1")
  paymentchannels  paymentchannels? @relation(fields: [paymentchannelid], references: [id], map: "payments_ibfk_3")

  @@index([bankaccountid], map: "bankaccountid")
  @@index([ownerid], map: "ownerid")
  @@index([paymentchannelid], map: "paymentchannelid")
}

model reviews {
  id          Int       @id @default(autoincrement())
  ownerid     Int?
  salonid     Int?
  note        String?   @db.Text
  ratings     Int       @default(3)
  datecreated DateTime  @default(now()) @db.DateTime(6)
  dateupdated DateTime? @db.DateTime(6)
  datedeleted DateTime  @db.DateTime(6)
  deleted     Int       @default(0)
  users       users?    @relation(fields: [ownerid], references: [userid], map: "reviews_ibfk_1")
  salons      salons?   @relation(fields: [salonid], references: [id], map: "reviews_ibfk_2")

  @@index([ownerid], map: "ownerid")
  @@index([salonid], map: "salonid")
}

model salons {
  id                          Int             @id @default(autoincrement())
  ownerid                     Int
  salontypeid                 Int?
  name                        String          @db.VarChar(255)
  alias                       String?         @db.VarChar(255)
  description                 String?         @db.Text
  logouri                     String?         @db.VarChar(255)
  ratings                     Int             @default(3)
  officialemail               String?         @db.VarChar(255)
  datecreated                 DateTime        @default(now()) @db.DateTime(6)
  dateupdated                 DateTime?       @db.DateTime(6)
  datedeleted                 DateTime?       @db.DateTime(6)
  deleted                     Int             @default(0)
  status                      String          @default("pending verification") @db.VarChar(50)
  users_salons_owneridTousers users           @relation("salons_owneridTousers", fields: [ownerid], references: [userid], onDelete: Cascade, map: "salons_ibfk_1")
  salontypes                  salontypes?     @relation(fields: [salontypeid], references: [id], map: "salons_ibfk_2")
  locations                   locations[]
  reviews                     reviews[]
  salonservices               salonservices[]
  users_salonsTousers_salonid users[]         @relation("salonsTousers_salonid")

  @@index([ownerid], map: "ownerid")
  @@index([salontypeid], map: "salontypeid")
}

model salonservices {
  id          Int       @id @default(autoincrement())
  salonid     Int
  serviceid   Int
  datecreated DateTime  @default(now()) @db.DateTime(6)
  datedeleted DateTime? @db.DateTime(6)
  deleted     Int       @default(0)
  salons      salons    @relation(fields: [salonid], references: [id], onDelete: Cascade, map: "salonservices_ibfk_1")
  services    services  @relation(fields: [serviceid], references: [id], onDelete: Cascade, map: "salonservices_ibfk_2")

  @@index([salonid], map: "salonid")
  @@index([serviceid], map: "serviceid")
}

model salontypes {
  id     Int      @id @default(autoincrement())
  type   String   @db.VarChar(255)
  salons salons[]
}

model services {
  id                    Int                     @id @default(autoincrement())
  title                 String                  @db.VarChar(255)
  description           String?                 @db.Text
  appointments          appointments[]
  salonlocationservices salonlocationservices[]
  salonservices         salonservices[]
  specialistservices    specialistservices[]
}

model specialistservices {
  id           Int       @id @default(autoincrement())
  specialistid Int
  serviceid    Int
  datecreated  DateTime  @default(now()) @db.DateTime(6)
  datedeleted  DateTime? @db.DateTime(6)
  deleted      Int       @default(0)
  services     services  @relation(fields: [serviceid], references: [id], onDelete: Cascade, map: "specialistservices_ibfk_2")
  users        users     @relation(fields: [specialistid], references: [userid], onDelete: Cascade, map: "specialistservices_ibfk_1")

  @@index([serviceid], map: "serviceid")
  @@index([specialistid], map: "specialistid")
}

model states {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  code           String?     @db.VarChar(255)
  googlelocation String      @unique(map: "googlelocation") @db.VarChar(255)
  cities         cities[]
  locations      locations[]
}

model users {
  id                                            Int                  @id @default(autoincrement())
  userid                                        Int                  @unique(map: "userid")
  salonid                                       Int?
  accounttypeid                                 Int
  firstname                                     String               @db.VarChar(255)
  lastname                                      String?              @db.VarChar(255)
  othernames                                    String?              @db.VarChar(255)
  email                                         String               @unique(map: "email") @db.VarChar(255)
  mobile                                        String?              @db.VarChar(255)
  homeaddress                                   String?              @db.Text
  avatar                                        String?              @db.VarChar(255)
  datecreated                                   DateTime             @default(now()) @db.DateTime(0)
  dateupdated                                   DateTime?            @db.DateTime(6)
  datedeactivated                               DateTime?            @db.DateTime(6)
  deactivated                                   Int                  @default(0)
  accounttypes                                  accounttypes         @relation(fields: [accounttypeid], references: [id], map: "users_ibfk_2")
  salons_salonsTousers_salonid                  salons?              @relation("salonsTousers_salonid", fields: [salonid], references: [id], map: "users_ibfk_3")
  logins                                        logins               @relation(fields: [userid], references: [id], onDelete: Cascade, map: "users_ibfk_1")
  appointments_appointments_specialistidTousers appointments[]       @relation("appointments_specialistidTousers")
  appointments_appointments_useridTousers       appointments[]       @relation("appointments_useridTousers")
  bankaccounts                                  bankaccounts[]
  payments                                      payments[]
  reviews                                       reviews[]
  salons_salons_owneridTousers                  salons[]             @relation("salons_owneridTousers")
  specialistservices                            specialistservices[]
  visits                                        visits[]

  @@index([accounttypeid], map: "accounttypeid")
  @@index([salonid], map: "salonid")
}

model visits {
  id          Int        @id @default(autoincrement())
  ownerid     Int
  locationid  Int?
  datevisited DateTime   @default(now()) @db.DateTime(6)
  locations   locations? @relation(fields: [locationid], references: [id], map: "visits_ibfk_2")
  users       users      @relation(fields: [ownerid], references: [userid], onDelete: Cascade, map: "visits_ibfk_1")

  @@index([locationid], map: "locationid")
  @@index([ownerid], map: "ownerid")
}

model salonlocationservices {
  id          Int       @id @default(autoincrement())
  locationid  Int
  serviceid   Int
  datecreated DateTime  @default(now()) @db.DateTime(6)
  datedeleted DateTime? @db.DateTime(6)
  deleted     Int       @default(0)
  locations   locations @relation(fields: [locationid], references: [id], onDelete: Cascade, map: "salonlocationservices_ibfk_1")
  services    services  @relation(fields: [serviceid], references: [id], onDelete: Cascade, map: "salonlocationservices_ibfk_2")

  @@index([locationid], map: "locationid")
  @@index([serviceid], map: "serviceid")
}
